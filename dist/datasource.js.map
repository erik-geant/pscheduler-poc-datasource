{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","url","name","q","withCredentials","headers","basicAuth","length","backend_request","method","console","log","JSON","stringify","datasourceRequest","then","r","status","message","title","target","data","mp","task","refId","datapoints","_","map","p","options","targets","filter","t","hide","undefined","Promise","res","rej","_request","test_parameters","target_promises","get_timeseries","all","range","interval","maxDataPoints","query","text","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  testDatasource() {\n    var url = this.url + '/version';\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: url,\n        method: 'GET'\n    };\n    console.log('testDatasource: ' + JSON.stringify(backend_request));\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n          if (r.status === 200) {\n            return {\n              status: \"success\",\n              message: \"Data source is working\",\n              title: \"Success\"\n            };\n          }\n        }\n    );\n  }\n\n  get_timeseries(target) {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/measurements/timeseries',\n        method: 'POST',\n        data: {\n          mp: target.mp,\n          task: target.task\n        }\n    };\n\n    console.log('target: ' + JSON.stringify(target));\n    console.log('query request: ' + JSON.stringify(backend_request));\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n            if (r.status != 200) {\n                console.log('error, got status: ' + r.status);\n                return 'bad request';\n            }\n            return {\n              target: target.refId,\n              datapoints: _.map(r.data, p => {\n                return [p[0], 1000*p[1]];\n              })\n            };\n       }\n    );\n  }\n\n  query(options) {\n\n    console.log('query(options): ' + JSON.stringify(options));\n\n    var targets = options.targets.filter(t => !t.hide);\n\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: test_parameters},\n                data: []\n            });\n        });\n    }\n\n    var target_promises = _.map(targets, t => {\n      return this.get_timeseries(t);\n    });\n\n    return Promise.all(target_promises).then(r => {\n        return {\n            _request: {\n                range: options.range,\n                interval: options.interval,\n                maxDataPoints: options.maxDataPoints\n            },\n            data: r\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return [];\n  }\n\n  metricFindQuery(query) {\n    console.log('metricFindQuery: IS THIS METHOD EVER CALLED?');\n    return [\n        {text: 'm1', value: 'v1'},\n        {text: 'm2', value: 'v2'}\n    ];\n  }\n\n  getTagKeys(options) {\n    return [];\n  }\n\n  getTagValues(options) {\n    return [];\n  }\n}\n"]}