{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","url","name","q","withCredentials","headers","basicAuth","length","backend_request","method","console","log","JSON","stringify","datasourceRequest","then","r","status","message","title","target","test_spec","test_type","t","Promise","res","rej","setTimeout","status_url","ds","data","delay","state","_","includes","loop_until_finished","hasOwnProperty","result","consoled","mp_hostname","task_data","payload","parameters","options","targets","filter","hide","undefined","_request","test_parameters","make_latency_test_params","result_promise","get_measurement_result","source","columns","rows","test","type","text","map","p","summary","start","end","retransmits","query","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  testDatasource() {\n    var url = this.url + '/json-proxy/connection-test';\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: url,\n        method: 'GET'\n    };\n    console.log('testDatasource: ' + JSON.stringify(backend_request));\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n          if (r.status === 200) {\n            return {\n              status: \"success\",\n              message: \"Data source is working\",\n              title: \"Success\"\n            };\n          }\n        }\n    );\n  }\n\n  make_latency_test_params(target) {\n    return {\n        'schema': 1,\n        'schedule': {'slip': 'PT5M'},\n        'test': {\n            'spec': target.test_spec,\n            'type': target.test_type\n        }\n    }\n  }\n\n  delay(t) {\n    return new Promise(function(res, rej) {\n        setTimeout(function() { res(); }, t);\n    });\n  }\n\n  loop_until_finished(status_url, ds) {\n    \n    console.log('getting status from ' + status_url);\n\n    var backend_request = {\n        withCredentials: ds.withCredentials,\n        headers: ds.headers,\n        url: ds.url + '/json-proxy/get',\n        method: 'POST',\n        data: {url: status_url + '/runs/first'} \n    };\n\n\n    return ds.delay(5000).then(function() {\n        return ds.backendSrv.datasourceRequest(backend_request).then(\n          r => {\n            if (r.status !== 200) {\n              return 'bad status: '  + r.status;\n            }\n \n            console.log('got task state: ' + r.data.state); \n            if (!_.includes(['pending', 'on-deck', 'running', 'finished'], r.data.state)) {\n              console.log('unusual task state');\n              return 'unhandled task state';\n            }\n  \n            if (r.data.state != 'finished') {\n              return ds.loop_until_finished(status_url, ds);\n            }\n\n            if (r.data.hasOwnProperty('result')) {\n                console.log('response has \"result\"');\n                return r.data.result;\n            }\n\n            if (r.data.hasOwnProperty('result-merged')) {\n                consoled.log('response has \"result-merged\"');\n                return r.data['result-merged'];\n            }\n\n            console.log(\"can't find result key in response: \" + JSON.stringify(r.data));\n            return \"can't find result key in response\"\n         }\n       );\n    });\n  }\n  \n  get_measurement_result(mp_hostname, task_data) {\n\n    var payload = {\n        url: 'https://' + mp_hostname + '/pscheduler/tasks',\n        parameters: task_data\n    };\n\n    console.log('get_measurement_results: ' + JSON.stringify(task_data))\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/json-proxy/post',\n        method: 'POST',\n        data: payload\n    };\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n            if (r.status === 200) {\n                return this.loop_until_finished(r.data, this);\n            } else {\n                console.log('error, got status: ' + r.status);\n                return 'bad request';\n            }\n        }\n    );\n  }\n\n  query(options) {\n\n    var targets = options.targets.filter(t => !t.hide);\n\n\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: test_parameters},\n                data: []\n            });\n        });\n    }\n\n    // just use the first target, as an experiement (for now only)\n\n    var test_parameters = this.make_latency_test_params(targets[0]);\n\n    var result_promise = this.get_measurement_result(targets[0].source, test_parameters)\n\n    return result_promise.then(r => {\n\n         var columns = [];\n         var rows = [];\n         \n         if (test_parameters.test.type == 'latency') {\n           columns = [\n               {text: 'src-ts', type: 'integer'},\n               {text: 'dst-ts', type: 'integer'},\n               {text: 'delta', type: 'integer'}\n           ];\n  \n           rows = _.map(r['raw-packets'], p => {\n               return [\n                   p['src-ts'],\n                   p['dst-ts'],\n                   p['dst-ts']-p['src-ts']\n               ];\n           });\n         }\n\n         if (test_parameters.test.type == 'throughput') {\n            columns = [\n               {text: 'start', type: 'number'},\n               {text: 'end', type: 'end'},\n               {text: 'retransmits', type: 'integer'},\n               {text: 'bytes', type: 'integer'}\n            ]\n            \n            rows = _.map(r['intervals'], p => {\n                return [\n                    p.summary.start,\n                    p.summary.end,\n                    p.summary.retransmits,\n                    p.summary['throughput-bytes']\n                ];\n            });\n         }\n\n         var data = {\n             columns: columns,\n             rows: rows,\n             type: 'table'\n         }\n\n         console.log('data: ' + JSON.stringify(data));\n         \n         return {\n             _request: test_parameters,\n             data: [data]\n         };\n    });\n  }\n\n  annotationQuery(options) {\n    return [];\n  }\n\n  metricFindQuery(query) {\n    console.log('metricFindQuery: IS THIS METHOD EVER CALLED?');\n/*\n    return Promise.resolve(\n        [\n            {text: 'm1', value: 'v1'},\n            {text: 'm2', value: 'v2'}\n        ]);\n*/\n\n    return [\n        {text: 'm1', value: 'v1'},\n        {text: 'm2', value: 'v2'}\n    ];\n  }\n\n  getTagKeys(options) {\n    return [];\n  }\n\n  getTagValues(options) {\n    return [];\n  }\n}\n"]}