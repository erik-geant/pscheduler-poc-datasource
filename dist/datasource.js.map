{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","url","name","q","withCredentials","headers","basicAuth","length","backend_request","method","console","log","JSON","stringify","datasourceRequest","then","r","status","message","title","target","test_spec","test_type","t","Promise","res","rej","setTimeout","status_url","ds","data","delay","state","_","includes","loop_until_finished","hasOwnProperty","result","consoled","mp_hostname","task_data","payload","parameters","owpts","OWPJAN_1970","upper_32","Math","pow","epoch_seconds","lower_32","nsec","msec","floor","epoch_ts_with_ms","response","columns","text","type","rows","map","src_ts","owpingts2epoch","p","dst_ts","delta","Date","summary","start","end","retransmits","times","intervals","max_ts","max","now","getTime","options","targets","filter","hide","undefined","_request","test_parameters","make_latency_test_params","result_promise","get_measurement_result","source","make_latency_table","refId","datapoints","make_latency_timeseries","make_throughput_table","make_throughput_timeseries","query","value"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,SAAKC,GAAL,GAAWJ,iBAAiBI,GAA5B;AACA,SAAKC,IAAL,GAAYL,iBAAiBK,IAA7B;AACA,SAAKC,CAAL,GAASL,EAAT;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKI,eAAL,GAAuBP,iBAAiBO,eAAxC;AACA,SAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,QAAI,OAAOR,iBAAiBS,SAAxB,KAAsC,QAAtC,IAAkDT,iBAAiBS,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,WAAKF,OAAL,CAAa,eAAb,IAAgCR,iBAAiBS,SAAjD;AACD;AACF;;;;qCAEgB;AACf,UAAIL,MAAM,KAAKA,GAAL,GAAW,6BAArB;AACA,UAAIO,kBAAkB;AAClBJ,yBAAiB,KAAKA,eADJ;AAElBC,iBAAS,KAAKA,OAFI;AAGlBJ,aAAKA,GAHa;AAIlBQ,gBAAQ;AAJU,OAAtB;AAMAC,cAAQC,GAAR,CAAY,qBAAqBC,KAAKC,SAAL,CAAeL,eAAf,CAAjC;;AAEA,aAAO,KAAKT,UAAL,CAAgBe,iBAAhB,CAAkCN,eAAlC,EAAmDO,IAAnD,CACH,aAAK;AACH,YAAIC,EAAEC,MAAF,KAAa,GAAjB,EAAsB;AACpB,iBAAO;AACLA,oBAAQ,SADH;AAELC,qBAAS,wBAFJ;AAGLC,mBAAO;AAHF,WAAP;AAKD;AACF,OATE,CAAP;AAWD;;;6CAEwBC,M,EAAQ;AAC/B,aAAO;AACH,kBAAU,CADP;AAEH,oBAAY,EAAC,QAAQ,MAAT,EAFT;AAGH,gBAAQ;AACJ,kBAAQA,OAAOC,SADX;AAEJ,kBAAQD,OAAOE;AAFX;AAHL,OAAP;AAQD;;;0BAEKC,C,EAAG;AACP,aAAO,IAAIC,OAAJ,CAAY,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAClCC,mBAAW,YAAW;AAAEF;AAAQ,SAAhC,EAAkCF,CAAlC;AACH,OAFM,CAAP;AAGD;;;wCAEmBK,U,EAAYC,E,EAAI;;AAElCnB,cAAQC,GAAR,CAAY,yBAAyBiB,UAArC;;AAEA,UAAIpB,kBAAkB;AAClBJ,yBAAiByB,GAAGzB,eADF;AAElBC,iBAASwB,GAAGxB,OAFM;AAGlBJ,aAAK4B,GAAG5B,GAAH,GAAS,iBAHI;AAIlBQ,gBAAQ,MAJU;AAKlBqB,cAAM,EAAC7B,KAAK2B,aAAa,aAAnB;AALY,OAAtB;;AASA,aAAOC,GAAGE,KAAH,CAAS,IAAT,EAAehB,IAAf,CAAoB,YAAW;AAClC,eAAOc,GAAG9B,UAAH,CAAce,iBAAd,CAAgCN,eAAhC,EAAiDO,IAAjD,CACL,aAAK;AACH,cAAIC,EAAEC,MAAF,KAAa,GAAjB,EAAsB;AACpB,mBAAO,iBAAkBD,EAAEC,MAA3B;AACD;;AAEDP,kBAAQC,GAAR,CAAY,qBAAqBK,EAAEc,IAAF,CAAOE,KAAxC;AACA,cAAI,CAACC,iBAAEC,QAAF,CAAW,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,UAAlC,CAAX,EAA0DlB,EAAEc,IAAF,CAAOE,KAAjE,CAAL,EAA8E;AAC5EtB,oBAAQC,GAAR,CAAY,oBAAZ;AACA,mBAAO,sBAAP;AACD;;AAED,cAAIK,EAAEc,IAAF,CAAOE,KAAP,IAAgB,UAApB,EAAgC;AAC9B,mBAAOH,GAAGM,mBAAH,CAAuBP,UAAvB,EAAmCC,EAAnC,CAAP;AACD;;AAED,cAAIb,EAAEc,IAAF,CAAOM,cAAP,CAAsB,QAAtB,CAAJ,EAAqC;AACjC1B,oBAAQC,GAAR,CAAY,uBAAZ;AACA,mBAAOK,EAAEc,IAAF,CAAOO,MAAd;AACH;;AAED,cAAIrB,EAAEc,IAAF,CAAOM,cAAP,CAAsB,eAAtB,CAAJ,EAA4C;AACxCE,qBAAS3B,GAAT,CAAa,8BAAb;AACA,mBAAOK,EAAEc,IAAF,CAAO,eAAP,CAAP;AACH;;AAEDpB,kBAAQC,GAAR,CAAY,wCAAwCC,KAAKC,SAAL,CAAeG,EAAEc,IAAjB,CAApD;AACA,iBAAO,mCAAP;AACF,SA5BK,CAAP;AA8BH,OA/BM,CAAP;AAgCD;;;2CAEsBS,W,EAAaC,S,EAAW;AAAA;;AAE7C,UAAIC,UAAU;AACVxC,aAAK,aAAasC,WAAb,GAA2B,mBADtB;AAEVG,oBAAYF;AAFF,OAAd;;AAKA9B,cAAQC,GAAR,CAAY,8BAA8BC,KAAKC,SAAL,CAAe2B,SAAf,CAA1C;;AAEA,UAAIhC,kBAAkB;AAClBJ,yBAAiB,KAAKA,eADJ;AAElBC,iBAAS,KAAKA,OAFI;AAGlBJ,aAAK,KAAKA,GAAL,GAAW,kBAHE;AAIlBQ,gBAAQ,MAJU;AAKlBqB,cAAMW;AALY,OAAtB;;AAQA,aAAO,KAAK1C,UAAL,CAAgBe,iBAAhB,CAAkCN,eAAlC,EAAmDO,IAAnD,CACH,aAAK;AACD,YAAIC,EAAEC,MAAF,KAAa,GAAjB,EAAsB;AAClB,iBAAO,MAAKkB,mBAAL,CAAyBnB,EAAEc,IAA3B,EAAiC,KAAjC,CAAP;AACH,SAFD,MAEO;AACHpB,kBAAQC,GAAR,CAAY,wBAAwBK,EAAEC,MAAtC;AACA,iBAAO,aAAP;AACH;AACJ,OARE,CAAP;AAUD;;;oCAEe0B,K,EAAO;AACrB;AACA,UAAIC,cAAc,UAAlB;AACJ;AACI,UAAIC,WAAWF,QAAQG,KAAKC,GAAL,CAAS,CAAT,EAAW,EAAX,CAAvB;AACA,UAAIC,gBAAiBH,QAAD,GAAaD,WAAjC;AACAI,uBAAiBJ,WAAjB;AACJ;AACI,UAAIK,WAAWN,QAAQE,QAAvB;AACA,UAAIK,OAAQ,CAACP,QAAQM,QAAT,IAAqB,UAAtB,GAAoCH,KAAKC,GAAL,CAAS,CAAT,EAAW,EAAX,CAA/C;AACA,UAAII,OAAOL,KAAKM,KAAL,CAAWF,OAAK,OAAhB,CAAX;AACA,UAAIG,mBAAmBL,gBAAgBG,OAAK,MAA5C;AACA,aAAOE,gBAAP;AACD;;;mCAEcV,K,EAAO;AACpB,UAAIC,cAAc,UAAlB;AACA,UAAIC,WAAWF,QAAQG,KAAKC,GAAL,CAAS,CAAT,EAAW,EAAX,CAAvB;AACA,UAAIC,gBAAiBH,QAAD,GAAaD,WAAjC;AACA,aAAOE,KAAKM,KAAL,CAAWJ,gBAAgB,IAA3B,IAAiC,IAAxC;AACD;;;uCAGkBM,Q,EAAU;AAAA;;AAC3B,UAAIC,UAAU,CACV,EAACC,MAAM,QAAP,EAAiBC,MAAM,MAAvB,EADU,EAEV,EAACD,MAAM,QAAP,EAAiBC,MAAM,MAAvB,EAFU,EAGV,EAACD,MAAM,OAAP,EAAgBC,MAAM,QAAtB,EAHU,CAAd;;AAMA,UAAIC,OAAOzB,iBAAE0B,GAAF,CAAML,SAAS,aAAT,CAAN,EAA+B,aAAK;AAC3C,YAAIM,SAAS,OAAKC,cAAL,CAAoBC,EAAE,QAAF,CAApB,CAAb;AACA,YAAIC,SAAS,OAAKF,cAAL,CAAoBC,EAAE,QAAF,CAApB,CAAb;AACA,YAAIE,QAAQ,CAACF,EAAE,QAAF,IAAcA,EAAE,QAAF,CAAf,IAA4BhB,KAAKC,GAAL,CAAS,CAAT,EAAW,EAAX,CAAxC;AACA,eAAO,CACH,IAAIkB,IAAJ,CAASL,MAAT,CADG,EAEH,IAAIK,IAAJ,CAASF,MAAT,CAFG,EAGHjB,KAAKM,KAAL,CAAWY,QAAQ,OAAnB,IAA4B,IAHzB,CAAP;AAKH,OATU,CAAX;;AAWC,aAAO;AACNT,iBAASA,OADH;AAENG,cAAMA,IAFA;AAGND,cAAM;AAHA,OAAP;AAKF;;;4CAEuBH,Q,EAAU;AAAA;;AAChC,aAAOrB,iBAAE0B,GAAF,CAAML,SAAS,aAAT,CAAN,EAA+B,aAAK;AACvC,YAAIM,SAAS,OAAKC,cAAL,CAAoBC,EAAE,QAAF,CAApB,CAAb;AACA,YAAIC,SAAS,OAAKF,cAAL,CAAoBC,EAAE,QAAF,CAApB,CAAb;AACA,YAAIE,QAAQ,CAACF,EAAE,QAAF,IAAcA,EAAE,QAAF,CAAf,IAA4BhB,KAAKC,GAAL,CAAS,CAAT,EAAW,EAAX,CAAxC;AACA,eAAO,CAACD,KAAKM,KAAL,CAAWY,QAAQ,OAAnB,IAA4B,IAA7B,EAAmCJ,SAAS,IAA5C,CAAP;AACH,OALM,CAAP;AAMD;;;0CAEqBN,Q,EAAU;AAC9B,UAAIC,UAAU,CACX,EAACC,MAAM,OAAP,EAAgBC,MAAM,QAAtB,EADW,EAEX,EAACD,MAAM,KAAP,EAAcC,MAAM,KAApB,EAFW,EAGX,EAACD,MAAM,aAAP,EAAsBC,MAAM,SAA5B,EAHW,EAIX,EAACD,MAAM,OAAP,EAAgBC,MAAM,SAAtB,EAJW,CAAd;;AAOA,UAAIC,OAAOzB,iBAAE0B,GAAF,CAAML,SAAS,WAAT,CAAN,EAA6B,aAAK;AACzC,eAAO,CACHQ,EAAEI,OAAF,CAAUC,KADP,EAEHL,EAAEI,OAAF,CAAUE,GAFP,EAGHN,EAAEI,OAAF,CAAUG,WAHP,EAIHP,EAAEI,OAAF,CAAU,kBAAV,CAJG,CAAP;AAMH,OAPU,CAAX;;AASA,aAAO;AACLX,iBAASA,OADJ;AAELG,cAAMA,IAFD;AAGLD,cAAM;AAHD,OAAP;AAKD;;;+CAE0BH,Q,EAAU;AACnC,UAAIgB,QAAQrC,iBAAE0B,GAAF,CAAML,SAASiB,SAAf,EAA0B,aAAK;AAAE,eAAOT,EAAEI,OAAF,CAAUE,GAAjB;AAAuB,OAAxD,CAAZ;AACA,UAAII,SAASvC,iBAAEwC,GAAF,CAAMH,KAAN,CAAb;AACA,UAAII,MAAM,IAAIT,IAAJ,GAAWU,OAAX,EAAV;AACA,aAAO1C,iBAAE0B,GAAF,CAAML,SAASiB,SAAf,EAA0B,aAAK;AAClC,eAAO,CACHT,EAAEI,OAAF,CAAU,kBAAV,CADG,EAEHQ,MAAM,CAACZ,EAAEI,OAAF,CAAUE,GAAV,GAAgBI,MAAjB,IAA2B,IAF9B,CAAP;AAIH,OALM,CAAP;AAMD;;;0BAGKI,O,EAAS;;AAEjB;;AAEI,UAAIC,UAAUD,QAAQC,OAAR,CAAgBC,MAAhB,CAAuB;AAAA,eAAK,CAACvD,EAAEwD,IAAR;AAAA,OAAvB,CAAd;;AAGA,UAAIF,YAAYG,SAAZ,IAAyBH,QAAQtE,MAAR,IAAkB,CAA/C,EAAkD;AAC9C,eAAO,IAAIiB,OAAJ,CAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9B,iBAAOD,IAAI;AACPwD,sBAAU,EAAEnD,MAAMoD,eAAR,EADH;AAEPpD,kBAAM;AAFC,WAAJ,CAAP;AAIH,SALM,CAAP;AAMH;;AAED;;AAEA,UAAIV,SAASyD,QAAQ,CAAR,CAAb;AACA,UAAIK,kBAAkB,KAAKC,wBAAL,CAA8B/D,MAA9B,CAAtB;AACA,UAAIS,KAAK,IAAT;;AAEA,UAAIuD,iBAAiB,KAAKC,sBAAL,CAA4BjE,OAAOkE,MAAnC,EAA2CJ,eAA3C,CAArB;;AAEA,aAAOE,eAAerE,IAAf,CAAoB,aAAK;;AAE3B,YAAIe,OAAO,IAAX;;AAET;AACA;AACA;;AAES,YAAIV,OAAOE,SAAP,IAAoB,SAAxB,EAAmC;AAChC,cAAIF,OAAOqC,IAAP,IAAe,OAAnB,EAA4B;AAC1B3B,mBAAOD,GAAG0D,kBAAH,CAAsBvE,CAAtB,CAAP;AACD,WAFD,MAEO;AACLc,mBAAO;AACLV,sBAAQA,OAAOoE,KADV;AAELC,0BAAY5D,GAAG6D,uBAAH,CAA2B1E,CAA3B;AAFP,aAAP;AAID;AACH;;AAED,YAAII,OAAOE,SAAP,IAAoB,YAAxB,EAAsC;AACnC,cAAIF,OAAOqC,IAAP,IAAe,OAAnB,EAA4B;AAC1B3B,mBAAOD,GAAG8D,qBAAH,CAAyB3E,CAAzB,CAAP;AACD,WAFD,MAEO;AACLc,mBAAO;AACLV,sBAAQA,OAAOoE,KADV;AAELC,0BAAY5D,GAAG+D,0BAAH,CAA8B5E,CAA9B;AAFP,aAAP;AAID;AACH;;AAEVN,gBAAQC,GAAR,CAAY,WAAWC,KAAKC,SAAL,CAAeiB,IAAf,CAAvB;;AAES,eAAO;AACHmD,oBAAUC,eADP;AAEHpD,gBAAM,CAACA,IAAD;AAFH,SAAP;AAIJ,OApCM,CAAP;AAqCD;;;oCAEe8C,O,EAAS;AACvB,aAAO,EAAP;AACD;;;oCAEeiB,K,EAAO;AACrBnF,cAAQC,GAAR,CAAY,8CAAZ;AACJ;;;;;;;;AAQI,aAAO,CACH,EAAC6C,MAAM,IAAP,EAAasC,OAAO,IAApB,EADG,EAEH,EAACtC,MAAM,IAAP,EAAasC,OAAO,IAApB,EAFG,CAAP;AAID;;;+BAEUlB,O,EAAS;AAClB,aAAO,EAAP;AACD;;;iCAEYA,O,EAAS;AACpB,aAAO,EAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  testDatasource() {\n    var url = this.url + '/json-proxy/connection-test';\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: url,\n        method: 'GET'\n    };\n    console.log('testDatasource: ' + JSON.stringify(backend_request));\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n          if (r.status === 200) {\n            return {\n              status: \"success\",\n              message: \"Data source is working\",\n              title: \"Success\"\n            };\n          }\n        }\n    );\n  }\n\n  make_latency_test_params(target) {\n    return {\n        'schema': 1,\n        'schedule': {'slip': 'PT5M'},\n        'test': {\n            'spec': target.test_spec,\n            'type': target.test_type\n        }\n    }\n  }\n\n  delay(t) {\n    return new Promise(function(res, rej) {\n        setTimeout(function() { res(); }, t);\n    });\n  }\n\n  loop_until_finished(status_url, ds) {\n    \n    console.log('getting status from ' + status_url);\n\n    var backend_request = {\n        withCredentials: ds.withCredentials,\n        headers: ds.headers,\n        url: ds.url + '/json-proxy/get',\n        method: 'POST',\n        data: {url: status_url + '/runs/first'} \n    };\n\n\n    return ds.delay(5000).then(function() {\n        return ds.backendSrv.datasourceRequest(backend_request).then(\n          r => {\n            if (r.status !== 200) {\n              return 'bad status: '  + r.status;\n            }\n \n            console.log('got task state: ' + r.data.state); \n            if (!_.includes(['pending', 'on-deck', 'running', 'finished'], r.data.state)) {\n              console.log('unusual task state');\n              return 'unhandled task state';\n            }\n  \n            if (r.data.state != 'finished') {\n              return ds.loop_until_finished(status_url, ds);\n            }\n\n            if (r.data.hasOwnProperty('result')) {\n                console.log('response has \"result\"');\n                return r.data.result;\n            }\n\n            if (r.data.hasOwnProperty('result-merged')) {\n                consoled.log('response has \"result-merged\"');\n                return r.data['result-merged'];\n            }\n\n            console.log(\"can't find result key in response: \" + JSON.stringify(r.data));\n            return \"can't find result key in response\"\n         }\n       );\n    });\n  }\n  \n  get_measurement_result(mp_hostname, task_data) {\n\n    var payload = {\n        url: 'https://' + mp_hostname + '/pscheduler/tasks',\n        parameters: task_data\n    };\n\n    console.log('get_measurement_results: ' + JSON.stringify(task_data))\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/json-proxy/post',\n        method: 'POST',\n        data: payload\n    };\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        r => {\n            if (r.status === 200) {\n                return this.loop_until_finished(r.data, this);\n            } else {\n                console.log('error, got status: ' + r.status);\n                return 'bad request';\n            }\n        }\n    );\n  }\n\n  _owpingts2epoch(owpts) {\n    // cf. owamp/arithm64.c, OWPNum64ToTimespec\n    var OWPJAN_1970 = 0x83aa7e80;\n//    var epoch_seconds = (owpts >> 32) - OWPJAN_1970;\n    var upper_32 = owpts / Math.pow(2,32);\n    var epoch_seconds = (upper_32) - OWPJAN_1970;\n    epoch_seconds -= OWPJAN_1970;\n//    var nsec = ((owpts & 0xffffffff) * 1000000000) >> 32;\n    var lower_32 = owpts - upper_32;\n    var nsec = ((owpts - lower_32) * 1000000000) / Math.pow(2,32);\n    var msec = Math.floor(nsec/1000000);\n    var epoch_ts_with_ms = epoch_seconds + msec/1000.0;\n    return epoch_ts_with_ms;\n  }\n\n  owpingts2epoch(owpts) {\n    var OWPJAN_1970 = 0x83aa7e80;\n    var upper_32 = owpts / Math.pow(2,32);\n    var epoch_seconds = (upper_32) - OWPJAN_1970;\n    return Math.floor(epoch_seconds * 1000)/1000;\n  }\n\n\n  make_latency_table(response) {\n    var columns = [\n        {text: 'src-ts', type: 'time'},\n        {text: 'dst-ts', type: 'time'},\n        {text: 'delta', type: 'number'}\n    ];\n\n    var rows = _.map(response['raw-packets'], p => {\n        var src_ts = this.owpingts2epoch(p['src-ts']);\n        var dst_ts = this.owpingts2epoch(p['dst-ts']);\n        var delta = (p['dst-ts'] - p['src-ts'])/Math.pow(2,32);\n        return [\n            new Date(src_ts), \n            new Date(dst_ts),\n            Math.floor(delta * 1000000)/1000\n        ];\n    });\n \n     return {\n      columns: columns,\n      rows: rows,\n      type: 'table'\n    }\n  }\n\n  make_latency_timeseries(response) {\n    return _.map(response['raw-packets'], p => {\n        var src_ts = this.owpingts2epoch(p['src-ts']);\n        var dst_ts = this.owpingts2epoch(p['dst-ts']);\n        var delta = (p['dst-ts'] - p['src-ts'])/Math.pow(2,32);\n        return [Math.floor(delta * 1000000)/1000, src_ts * 1000];\n    });\n  }\n\n  make_throughput_table(response) {\n    var columns = [\n       {text: 'start', type: 'number'},\n       {text: 'end', type: 'end'},\n       {text: 'retransmits', type: 'integer'},\n       {text: 'bytes', type: 'integer'}\n    ]\n    \n    var rows = _.map(response['intervals'], p => {\n        return [\n            p.summary.start,\n            p.summary.end,\n            p.summary.retransmits,\n            p.summary['throughput-bytes']\n        ];\n    });\n\n    return {\n      columns: columns,\n      rows: rows,\n      type: 'table'\n    }\n  }\n\n  make_throughput_timeseries(response) {\n    var times = _.map(response.intervals, p => { return p.summary.end; });\n    var max_ts = _.max(times);\n    var now = new Date().getTime();\n    return _.map(response.intervals, p => {\n        return [\n            p.summary['throughput-bytes'],\n            now - (p.summary.end - max_ts) * 1000\n        ];\n    });\n  }\n\n\n  query(options) {\n\n//console.log('query(options): ' + JSON.stringify(options));\n\n    var targets = options.targets.filter(t => !t.hide);\n\n\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: test_parameters},\n                data: []\n            });\n        });\n    }\n\n    // just use the first target, as an experiement (for now only)\n\n    var target = targets[0];\n    var test_parameters = this.make_latency_test_params(target);\n    var ds = this;\n\n    var result_promise = this.get_measurement_result(target.source, test_parameters)\n\n    return result_promise.then(r => {\n\n         var data = null;\n\n//console.log('target: ' + JSON.stringify(target));\n//console.log('ds: ' + JSON.stringify(ds));\n//console.log('result: ' + JSON.stringify(r));\n         \n         if (target.test_type == 'latency') {\n            if (target.type == 'table') {\n              data = ds.make_latency_table(r);\n            } else {\n              data = {\n                target: target.refId,\n                datapoints: ds.make_latency_timeseries(r)\n              }\n            }\n         }\n\n         if (target.test_type == 'throughput') {\n            if (target.type == 'table') {\n              data = ds.make_throughput_table(r);\n            } else {\n              data = {\n                target: target.refId,\n                datapoints: ds.make_throughput_timeseries(r)\n              }\n            }\n         }\n            \nconsole.log('data: ' + JSON.stringify(data));\n         \n         return {\n             _request: test_parameters,\n             data: [data]\n         };\n    });\n  }\n\n  annotationQuery(options) {\n    return [];\n  }\n\n  metricFindQuery(query) {\n    console.log('metricFindQuery: IS THIS METHOD EVER CALLED?');\n/*\n    return Promise.resolve(\n        [\n            {text: 'm1', value: 'v1'},\n            {text: 'm2', value: 'v2'}\n        ]);\n*/\n\n    return [\n        {text: 'm1', value: 'v1'},\n        {text: 'm2', value: 'v2'}\n    ];\n  }\n\n  getTagKeys(options) {\n    return [];\n  }\n\n  getTagValues(options) {\n    return [];\n  }\n}\n"]}