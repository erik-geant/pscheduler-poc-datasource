{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","default_test_type","default_source","default_destination","default_ip_version","default_packet_count","default_packet_interval","default_packet_timeout","default_duration","target","source","destination","test_type","packet_count","packet_interval","packet_timeout","ip_version","duration","test_spec","make_test_spec","t","_test_spec","dest","schema","console","log","JSON","stringify","measurement_type","option_name","$options","text","value","rawQuery","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n\n    // general test params\n    var default_test_type = 'latency'\n    var default_source = 'psmall-b-3.basnet.by';\n    var default_destination = 'psmall-b-2.basnet.by';\n    var default_ip_version = 4;\n\n    // owping params\n    var default_packet_count = 100;\n    var default_packet_interval = .1;\n    var default_packet_timeout = 0;\n\n    // iperf3 params\n    var default_duration = 'PT10S';\n\n    this.target.source =\n        this.target.source || default_source;\n    this.target.destination =\n        this.target.destination || default_destination;\n    this.target.test_type =\n        this.target.test_type || default_test_type;\n\n    this.target.packet_count =\n        this.target.packet_count || default_packet_count;\n    this.target.packet_interval =\n        this.target.packet_interval || default_packet_interval;\n    this.target.packet_timeout =\n        this.target.packet_timeout || default_packet_timeout;\n    this.target.ip_version =\n        this.target.ip_version || default_ip_version;\n\n    this.target.duration =\n        this.target.duration || default_duration;\n\n    this.target.test_spec = this.make_test_spec(this.target)\n\n  }\n\n  make_test_spec(t) {\n    var _test_spec = {\n        source: t.source,\n        dest: t.destination,\n        schema: 1 \n    };\n\n    if (t.test_type == 'latency') {\n        _test_spec['output-raw'] = true;\n        _test_spec['ip-version'] = t.ip_version;\n        _test_spec['packet-count'] = t.packet_count;\n        _test_spec['packet-interval'] = t.packet_interval;\n        _test_spec['packet-timeout'] = t.packet_timeout;\n    }\n\n    if (t.test_type == 'throughput') {\n        _test_spec['ip-version'] = t.ip_version;\n        _test_spec['duration'] = t.duration;\n    }\nconsole.log('test_spec: ' + JSON.stringify(_test_spec)); \n    return _test_spec;\n  }\n\n  getOptions(measurement_type, option_name) {\n    var $options = [];\n\n    if (measurement_type == 'latency' && option_name == 'packet-timeout') {\n        $options = [\n            {text: '0', value: 0},\n            {text: '.1', value: .1},\n            {text: '1.0', value: 1.0}\n        ];\n    }\n    if (measurement_type == 'latency' && option_name == 'packet-count') {\n        $options = [\n            {text: '10', value: 10},\n            {text: '50', value: 50},\n            {text: '100', value: 100},\n            {text: '250', value: 250}\n        ];\n    }\n    if (measurement_type == 'latency' && option_name == 'packet-interval') {\n        $options = [\n            {text: '.05', value: .05},\n            {text: '.1', value: .1},\n            {text: '.5', value: .5},\n            {text: '1.0', value: 1.0}\n        ];\n    }\n\n    if (measurement_type == 'throughput' && option_name == 'duration') {\n        $options = [\n            {text: '5s', value: 'PT5S'},\n            {text: '10s', value: 'PT10S'},\n            {text: '30s', value: 'PT30S'}\n        ];\n    }\n\n    if (option_name == 'source' || option_name == 'destination') {\n        $options = [\n            {text: 'psmall-b-3.basnet.by', value: 'psmall-b-3.basnet.by'},\n            {text: 'psmall-b-2.basnet.by', value: 'psmall-b-2.basnet.by'},\n        ];\n    }\n\n    if (option_name == 'ip-version') {\n        $options = [\n            {text: 'ipv4', value: 4},\n            {text: 'ipv6', value: 6},\n        ];\n    }\n\n    if (option_name == 'test-type') {\n        $options = [\n            {text: 'latency', value: 'latency'},\n            {text: 'throughput', value: 'throughput'}\n        ];\n    }\n\n\n\n    return $options;\n\n/*\n    return this.datasource.metricFindQuery({\n        type: type_name,\n        option: option_name\n    });\n*/\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.target.test_spec = this.make_test_spec(this.target);\n//    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}